import Box from '@material-ui/core/Box';
import Divider from '@material-ui/core/Divider';
import FormControl from '@material-ui/core/FormControl';
import Grid from '@material-ui/core/Grid';
import InputLabel from '@material-ui/core/InputLabel';
import MenuItem from '@material-ui/core/MenuItem';
import Select from '@material-ui/core/Select';
import Typography from '@material-ui/core/Typography';
import AutocompleteFreeSoloField from 'components/fields/AutocompleteFreeSoloField';
import CustomTextField from 'components/fields/CustomTextField';
import { IMultiAutocompleteFieldOption } from 'components/fields/MultiAutocompleteField';
import MultiAutocompleteFieldVariableSize from 'components/fields/MultiAutocompleteFieldVariableSize';
import { useFormikContext } from 'formik';
import { debounce } from 'lodash-es';
import React, { useCallback } from 'react';
import { IProjectAdvancedFilters } from './AdvancedSearch';

/**
 * Project - Advanced filters
 *
 * @return {*}
 */
const ProjectAdvancedFilters: React.FC = (props) => {
  const formikProps = useFormikContext<IProjectAdvancedFilters>();
  const { handleChange, values } = formikProps;

  const convertOptions = (value: any): IMultiAutocompleteFieldOption[] =>
    value.map((item: any) => {
      return { value: parseInt(item.id), label: item.label };
    });

  const handleGetInitList = async (initialvalues: number[]) => {
    const response = await restorationTrackerApi.taxonomy.getSpeciesFromIds(initialvalues);
    return convertOptions(response.searchResponse);
  };

  const handleSearch = useCallback(
    debounce(
      async (
        inputValue: string,
        existingValues: (string | number)[],
        callback: (searchedValues: IMultiAutocompleteFieldOption[]) => void
      ) => {
        const response = await restorationTrackerApi.taxonomy.searchSpecies(inputValue.toLowerCase());
        const newOptions = convertOptions(response.searchResponse).filter(
          (item) => !existingValues.includes(item.value)
        );
        callback(newOptions);
      },
      500
    ),
    []
  );

  return (
    <Box data-testid="advancedFilters">
      <Grid container spacing={3} justify="flex-start">
        <Grid item xs={12} md={3}>
          <Typography variant="subtitle1" component="h3">
            <strong>Project Details</strong>
          </Typography>
        </Grid>
        <Grid item xs={12} md={9}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <AutocompleteFreeSoloField
                id="contact_agency"
                name="contact_agency"
                label="Contact Agency"
                options={props.contact_agency}
                required={false}
              />
            </Grid>
            <Grid item xs={12}>
              <StartEndDateFields
                formikProps={formikProps}
                startName={'start_date'}
                endName={'end_date'}
                startRequired={false}
                endRequired={false}
              />
            </Grid>
            <Grid item xs={12}>
              <FormControl fullWidth variant="outlined" required={false}>
                <InputLabel id="funding_agency-label">Funding Agencies</InputLabel>
                <Select
                  data-testid="funding_agency"
                  id="funding_agency"
                  name="funding_agency"
                  labelId="funding_agency-label"
                  label="Funding Agencies"
                  value={values.funding_agency?.toString() ? values.funding_agency : []}
                  onChange={handleChange}
                  defaultValue={[]}
                  multiple
                  displayEmpty
                  inputProps={{ 'aria-label': 'Funding Agency Name', 'data-testid': 'funding_agency' }}>
                  {props.funding_agency.map((item) => (
                    <MenuItem key={item.value} value={item.value}>
                      {item.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12}>
              <MultiAutocompleteFieldVariableSize
                id="species"
                label="Species"
                required={false}
                type="api-search"
                getInitList={handleGetInitList}
                search={handleSearch}
              />
            </Grid>

          </Grid>
        </Grid>
      </Grid>

    </Box>
  );
};

export default ProjectAdvancedFilters;
