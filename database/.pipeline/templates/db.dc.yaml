apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: postgresql-persistent-template
metadata:
  creationTimestamp: null
  name: biohub-platform-db-dc
parameters:
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: NAME
    required: true
    value: 'postgresql'
  - description: The ImageStream name.
    displayName: IMAGE_STREAM_NAME
    name: IMAGE_STREAM_NAME
    value: 'crunchy-postgres-gis'
  - description: The OpenShift Namespace where the ImageStream resides.
    displayName: Namespace
    name: IMAGE_STREAM_NAMESPACE
    value: 'a0ec71-tools'
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: 'postgresql'
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Connection Username
    name: POSTGRESQL_USER
    required: true
    value: 'postgres'
  - description: Admin Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Admin Connection Username
    name: POSTGRESQL_ADMIN_USER
    required: true
    value: 'postgres'
  - description: Password for the PostgreSQL connection user.
    displayName: PostgreSQL Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: POSTGRESQL_PASSWORD
    required: true
  - description: Password for the PostgreSQL admin user.
    displayName: PostgreSQL Admin Connection Password
    from: '[a-zA-Z0-9]{16}'
    generate: expression
    name: POSTGRESQL_ADMIN_PASSWORD
    required: true
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: 'biohubbc'
  - description: Set this value to override the /pgdata directory name. By default the hostname of the container is used, which does not work well in OpenShift.
    displayName: PGDATA Path Override
    name: PGDATA_PATH_OVERRIDE
    required: true
    value: 'biohubbc'
  - name: TZ
    description: Database timezone
    required: false
    value: 'America/Vancouver'
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: '3Gi'
  - description: Version of PostgreSQL-PostGIS image to be used (9.2, 9.4, 9.5 or latest).
    displayName: Version of PostgreSQL-PostGIS Image
    name: IMAGE_STREAM_VERSION
    required: true
    value: 'ubi8-14.2-3.1-0'
  - name: CPU_REQUEST
    value: '10m'
  - name: CPU_LIMIT
    value: '200m'
  - name: MEMORY_REQUEST
    value: '512Mi'
  - name: MEMORY_LIMIT
    value: '2Gi'
  - name: REPLICAS
    value: '1'
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: "{.data['database-name']}"
        template.openshift.io/expose-password: "{.data['database-user-password']}"
        template.openshift.io/expose-admin-password: "{.data['database-admin-password']}"
        template.openshift.io/expose-admin-username: "{.data['database-user']}"
        as-copy-of: biohubbc-creds
      name: '${DATABASE_SERVICE_NAME}'
      role: db
    stringData:
      database-name: '${POSTGRESQL_DATABASE}'
      database-user-password: '${POSTGRESQL_PASSWORD}'
      database-admin-password: '${POSTGRESQL_ADMIN_PASSWORD}'
      database-user: '${POSTGRESQL_USER}'
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
        role: db
      name: '${DATABASE_SERVICE_NAME}'
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        name: '${DATABASE_SERVICE_NAME}'
      sessionAffinity: None
      type: ClusterIP
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: '${DATABASE_SERVICE_NAME}'
      role: db
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: '${VOLUME_CAPACITY}'
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: '${IMAGE_STREAM_NAME}'
      creationTimestamp:
      labels:
        shared: 'true'
      annotations: {}
      role: db
    spec:
      lookupPolicy:
        local: false
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: '${DATABASE_SERVICE_NAME}'
      role: db
    spec:
      replicas: '${{REPLICAS}}'
      selector:
        name: '${DATABASE_SERVICE_NAME}'
        role: db
      strategy:
        type: Recreate
        maxSurge: 50%
        maxUnavailable: 0
      template:
        metadata:
          labels:
            name: '${DATABASE_SERVICE_NAME}'
            role: db
        spec:
          containers:
            - capabilities: {}
              env:
                - name: PG_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-user-password
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-admin-password
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_PRIMARY_PORT
                  value: '5432'
                - name: PG_PRIMARY_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_PRIMARY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-user-password
                      name: '${DATABASE_SERVICE_NAME}'
                - name: PG_MODE
                  value: 'primary'
                - name: MODE
                  value: 'postgres'
                - name: PGOPTIONS
                  value: '-c maintenance_work_mem=128MB'
                - name: PGTZ
                  value: '${TZ}'
                - name: PGDATA_PATH_OVERRIDE
                  value: '${PGDATA_PATH_OVERRIDE}'
              image: ' '
              imagePullPolicy: IfNotPresent
              name: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              startupProbe:
                exec:
                  command:
                    - '/bin/sh'
                    - '-i'
                    - '-c'
                    - pg_isready -h 127.0.0.1 -q -t 10
                initialDelaySeconds: 10
                periodSeconds: 15
                timeoutSeconds: 10
                successThreshold: 1
                failureThreshold: 10
              readinessProbe:
                exec:
                  command:
                    - '/bin/sh'
                    - '-i'
                    - '-c'
                    - pg_isready -h 127.0.0.1 -q -t10
                initialDelaySeconds: 10
                periodSeconds: 15
                timeoutSeconds: 10
                successThreshold: 1
                failureThreshold: 10
              livenessProbe:
                tcpSocket:
                  port: 5432
                initialDelaySeconds: 10
                periodSeconds: 15
                timeoutSeconds: 10
                successThreshold: 1
                failureThreshold: 10
              resources:
                requests:
                  cpu: '${CPU_REQUEST}'
                  memory: '${MEMORY_REQUEST}'
                limits:
                  cpu: '${CPU_LIMIT}'
                  memory: '${MEMORY_LIMIT}'
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: '/dev/termination-log'
              volumeMounts:
                - mountPath: '/pgdata'
                  name: '${DATABASE_SERVICE_NAME}-data'
                - mountPath: '/var/run/postgresql'
                  name: '${DATABASE_SERVICE_NAME}-run'
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            - name: '${DATABASE_SERVICE_NAME}-data'
              persistentVolumeClaim:
                claimName: '${DATABASE_SERVICE_NAME}'
            - name: '${DATABASE_SERVICE_NAME}-run'
              emptyDir: {}
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: '${IMAGE_STREAM_NAME}:${IMAGE_STREAM_VERSION}'
              namespace: '${IMAGE_STREAM_NAMESPACE}'
            lastTriggeredImage: ''
          type: ImageChange
        - type: ConfigChange
    status: {}
