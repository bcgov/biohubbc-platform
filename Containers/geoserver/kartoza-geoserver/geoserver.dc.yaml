kind: Template
apiVersion: template.openshift.io/v1
description: A template that can be used to produce a GeoServer DeploymentConfig and related artifacts (routes, services, etc).
labels:
  template: kartoza-geoserver-dc
metadata:
  name: kartoza-geoserver-dc
  labels:
    app: kartoza-geoserver
parameters:
  - name: NAME
    description: The name of the OpenShift Service exposed for geoserver .
    required: true
    value: "kartoza-geoserver"
  - name: SUFFIX
    required: true
    value: "-dev"
  - name: HOST
    description: Host name of the application
    required: true
    value: "geoserver-dev-biohub-platform.apps.silver.devops.gov.bc.ca"
  - name: TARGET_IMAGE_NAME
    description: The ImageStream name.
    required: true
    value: "kartoza-geoserver"
  - name: TARGET_IMAGE_VERSION
    description: Version of GeoServer image stream tag to be used (eg. 2.21.1 or latest).
    required: true
    value: latest
  - name: SOURCE_IMAGE_NAME
    required: true
    value: "kartoza-geoserver"
  - name: SOURCE_IMAGE_VERSION
    required: true
    value: "latest"
  - name: SOURCE_IMAGE_NAMESPACE
    required: true
    value: "a0ec71-tools"
  # - name: VOLUME_CAPACITY
  #   description: Volume space available for data, e.g. 512M, 2Gi.
  #   required: true
  #   value: 3G
  - name: PORT_DEFAULT
    value: "8080"
  - name: PORT_DEFAULT_NAME
    description: Default port name
    value: "8080-tcp"
  - name: CPU_REQUEST
    value: "100M"
  - name: CPU_LIMIT
    value: "750M"
  - name: MEMORY_REQUEST
    value: "512M"
  - name: MEMORY_LIMIT
    value: "2G"
  - name: REPLICAS
    value: "1"
objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}${SUFFIX}
      labels:
        app: ${NAME}
    spec:
      ports:
        - name: ${NAME}-${PORT_DEFAULT_NAME}
          protocol: TCP
          port: ${{PORT_DEFAULT}}
          targetPort: ${{PORT_DEFAULT}}
      sessionAffinity: None
      selector:
        deploymentConfig: ${NAME}${SUFFIX}
      type: ClusterIP

  # - kind: PersistentVolumeClaim
  #   apiVersion: v1
  #   metadata:
  #     name: '${NAME}${SUFFIX}'
  #     role: geoserver
  #   spec:
  #     accessModes:
  #       - ReadWriteMany
  #     resources:
  #       requests:
  #         storage: '${VOLUME_CAPACITY}'

  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: "${TARGET_IMAGE_NAME}"
      labels:
        app: ${NAME}
        shared: "true"
      annotations: {}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: "${TARGET_IMAGE_VERSION}"
          annotations:
          from:
            kind: ImageStreamTag
            name: "${SOURCE_IMAGE_NAME}:${SOURCE_IMAGE_VERSION}"
            namespace: ${SOURCE_IMAGE_NAMESPACE}
          generation: 1
          importPolicy: {}
          referencePolicy:
            type: Source
      successfulBuildsHistoryLimit: 5

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: "${NAME}${SUFFIX}"
      labels:
        app: ${NAME}
      annotations:
        template.alpha.openshift.io/wait-for-ready: "true"
      role: geoserver
    spec:
      replicas: "${{REPLICAS}}"
      revisionHistoryLimit: 10
      selector:
        deploymentConfig: ${NAME}${SUFFIX}
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources:
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
        type: Rolling
      template:
        metadata:
          annotations: null
          creationTimestamp: null
          labels:
            deploymentConfig: "${NAME}${SUFFIX}"
            name: "${NAME}${SUFFIX}"
            role: geoserver
        spec:
          containers:
            - capabilities: {}
              image: " "
              imagePullPolicy: Always
              name: geoserver
              ports:
                - containerPort: ${{PORT_DEFAULT}}
                  protocol: TCP
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              securityContext: {}
              terminationMessagePath: "/dev/termination-log"
              # volumeMounts:
              #   - mountPath: '/usr/share/geoserver/data_dir'
              #     name: '${NAME}${SUFFIX}-data'
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          # volumes:
          #   - name: '${NAME}${SUFFIX}-data'
          #     persistentVolumeClaim:
          #       claimName: '${NAME}${SUFFIX}'
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - geoserver
            from:
              kind: ImageStreamTag
              name: "${TARGET_IMAGE_NAME}:${TARGET_IMAGE_VERSION}"
          type: ImageChange
        - type: ConfigChange
    status:
      availableReplicas: 0
      latestVersion: 0
      observedGeneration: 0
      replicas: 0
      unavailableReplicas: 0
      updatedReplicas: 0

  - kind: Route
    apiVersion: route.openshift.io/v1
    metadata:
      name: ${NAME}${SUFFIX}
      labels:
        app: ${NAME}
      annotations: {}
      creationTimestamp: null
    spec:
      host: ${HOST}
      tls:
        # `Allow` is normally set to `Redirect` to ensure http traffic is redirected to https, but this requires non-default configuration in tomcat that has not yet been set up
        insecureEdgeTerminationPolicy: Allow
        termination: edge
      to:
        kind: Service
        name: ${NAME}${SUFFIX}
        weight: 100
      port:
        targetPort: ${NAME}-${PORT_DEFAULT_NAME}
      wildcardPolicy: None
